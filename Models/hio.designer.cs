#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.296
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace HIO.Models
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="dbb7ab6d80ef0b40bc925da0210152b17d")]
	public partial class hioDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertUser(User instance);
    partial void UpdateUser(User instance);
    partial void DeleteUser(User instance);
    partial void Insertcomment(comment instance);
    partial void Updatecomment(comment instance);
    partial void Deletecomment(comment instance);
    partial void Inserthio_event(hio_event instance);
    partial void Updatehio_event(hio_event instance);
    partial void Deletehio_event(hio_event instance);
    partial void Insertuser_location(user_location instance);
    partial void Updateuser_location(user_location instance);
    partial void Deleteuser_location(user_location instance);
    partial void InsertSetting(Setting instance);
    partial void UpdateSetting(Setting instance);
    partial void DeleteSetting(Setting instance);
    partial void Insertplace(place instance);
    partial void Updateplace(place instance);
    partial void Deleteplace(place instance);
    partial void Insertnotice(notice instance);
    partial void Updatenotice(notice instance);
    partial void Deletenotice(notice instance);
    partial void InsertIPaddress(IPaddress instance);
    partial void UpdateIPaddress(IPaddress instance);
    partial void DeleteIPaddress(IPaddress instance);
    #endregion
		
		public hioDataContext() : 
				base(global::System.Configuration.ConfigurationManager.ConnectionStrings["dbb7ab6d80ef0b40bc925da0210152b17dConnectionString"].ConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public hioDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public hioDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public hioDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public hioDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<User> Users
		{
			get
			{
				return this.GetTable<User>();
			}
		}
		
		public System.Data.Linq.Table<comment> comments
		{
			get
			{
				return this.GetTable<comment>();
			}
		}
		
		public System.Data.Linq.Table<hio_event> hio_events
		{
			get
			{
				return this.GetTable<hio_event>();
			}
		}
		
		public System.Data.Linq.Table<user_location> user_locations
		{
			get
			{
				return this.GetTable<user_location>();
			}
		}
		
		public System.Data.Linq.Table<Setting> Settings
		{
			get
			{
				return this.GetTable<Setting>();
			}
		}
		
		public System.Data.Linq.Table<place> places
		{
			get
			{
				return this.GetTable<place>();
			}
		}
		
		public System.Data.Linq.Table<notice> notices
		{
			get
			{
				return this.GetTable<notice>();
			}
		}
		
		public System.Data.Linq.Table<IPaddress> IPaddresses
		{
			get
			{
				return this.GetTable<IPaddress>();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Users")]
	public partial class User : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _UserID;
		
		private string _PID;
		
		private System.Nullable<decimal> _Lat;
		
		private System.Nullable<decimal> _Long;
		
		private string _Country;
		
		private string _City;
		
		private System.Nullable<System.DateTime> _Timestamp;
		
		private string _Comment;
		
		private string _Password;
		
		private EntitySet<comment> _comments;
		
		private EntitySet<hio_event> _hio_events;
		
		private EntitySet<user_location> _user_locations;
		
		private EntitySet<IPaddress> _IPaddresses;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnUserIDChanging(int value);
    partial void OnUserIDChanged();
    partial void OnPIDChanging(string value);
    partial void OnPIDChanged();
    partial void OnLatChanging(System.Nullable<decimal> value);
    partial void OnLatChanged();
    partial void OnLongChanging(System.Nullable<decimal> value);
    partial void OnLongChanged();
    partial void OnCountryChanging(string value);
    partial void OnCountryChanged();
    partial void OnCityChanging(string value);
    partial void OnCityChanged();
    partial void OnTimestampChanging(System.Nullable<System.DateTime> value);
    partial void OnTimestampChanged();
    partial void OnCommentChanging(string value);
    partial void OnCommentChanged();
    partial void OnPasswordChanging(string value);
    partial void OnPasswordChanged();
    #endregion
		
		public User()
		{
			this._comments = new EntitySet<comment>(new Action<comment>(this.attach_comments), new Action<comment>(this.detach_comments));
			this._hio_events = new EntitySet<hio_event>(new Action<hio_event>(this.attach_hio_events), new Action<hio_event>(this.detach_hio_events));
			this._user_locations = new EntitySet<user_location>(new Action<user_location>(this.attach_user_locations), new Action<user_location>(this.detach_user_locations));
			this._IPaddresses = new EntitySet<IPaddress>(new Action<IPaddress>(this.attach_IPaddresses), new Action<IPaddress>(this.detach_IPaddresses));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int UserID
		{
			get
			{
				return this._UserID;
			}
			set
			{
				if ((this._UserID != value))
				{
					this.OnUserIDChanging(value);
					this.SendPropertyChanging();
					this._UserID = value;
					this.SendPropertyChanged("UserID");
					this.OnUserIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PID", DbType="VarChar(MAX)")]
		public string PID
		{
			get
			{
				return this._PID;
			}
			set
			{
				if ((this._PID != value))
				{
					this.OnPIDChanging(value);
					this.SendPropertyChanging();
					this._PID = value;
					this.SendPropertyChanged("PID");
					this.OnPIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Lat", DbType="Decimal(18,8)")]
		public System.Nullable<decimal> Lat
		{
			get
			{
				return this._Lat;
			}
			set
			{
				if ((this._Lat != value))
				{
					this.OnLatChanging(value);
					this.SendPropertyChanging();
					this._Lat = value;
					this.SendPropertyChanged("Lat");
					this.OnLatChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Long", DbType="Decimal(18,8)")]
		public System.Nullable<decimal> Long
		{
			get
			{
				return this._Long;
			}
			set
			{
				if ((this._Long != value))
				{
					this.OnLongChanging(value);
					this.SendPropertyChanging();
					this._Long = value;
					this.SendPropertyChanged("Long");
					this.OnLongChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Country", DbType="VarChar(50)")]
		public string Country
		{
			get
			{
				return this._Country;
			}
			set
			{
				if ((this._Country != value))
				{
					this.OnCountryChanging(value);
					this.SendPropertyChanging();
					this._Country = value;
					this.SendPropertyChanged("Country");
					this.OnCountryChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_City", DbType="VarChar(50)")]
		public string City
		{
			get
			{
				return this._City;
			}
			set
			{
				if ((this._City != value))
				{
					this.OnCityChanging(value);
					this.SendPropertyChanging();
					this._City = value;
					this.SendPropertyChanged("City");
					this.OnCityChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Timestamp", DbType="DateTime")]
		public System.Nullable<System.DateTime> Timestamp
		{
			get
			{
				return this._Timestamp;
			}
			set
			{
				if ((this._Timestamp != value))
				{
					this.OnTimestampChanging(value);
					this.SendPropertyChanging();
					this._Timestamp = value;
					this.SendPropertyChanged("Timestamp");
					this.OnTimestampChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Comment", DbType="VarChar(50)")]
		public string Comment
		{
			get
			{
				return this._Comment;
			}
			set
			{
				if ((this._Comment != value))
				{
					this.OnCommentChanging(value);
					this.SendPropertyChanging();
					this._Comment = value;
					this.SendPropertyChanged("Comment");
					this.OnCommentChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Password", DbType="VarChar(50)", CanBeNull=false)]
		public string Password
		{
			get
			{
				return this._Password;
			}
			set
			{
				if ((this._Password != value))
				{
					this.OnPasswordChanging(value);
					this.SendPropertyChanging();
					this._Password = value;
					this.SendPropertyChanged("Password");
					this.OnPasswordChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_comment", Storage="_comments", ThisKey="UserID", OtherKey="UserID")]
		public EntitySet<comment> comments
		{
			get
			{
				return this._comments;
			}
			set
			{
				this._comments.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_hio_event", Storage="_hio_events", ThisKey="UserID", OtherKey="UserID")]
		public EntitySet<hio_event> hio_events
		{
			get
			{
				return this._hio_events;
			}
			set
			{
				this._hio_events.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_user_location", Storage="_user_locations", ThisKey="UserID", OtherKey="UserID")]
		public EntitySet<user_location> user_locations
		{
			get
			{
				return this._user_locations;
			}
			set
			{
				this._user_locations.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_IPaddress", Storage="_IPaddresses", ThisKey="UserID", OtherKey="UserID")]
		public EntitySet<IPaddress> IPaddresses
		{
			get
			{
				return this._IPaddresses;
			}
			set
			{
				this._IPaddresses.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_comments(comment entity)
		{
			this.SendPropertyChanging();
			entity.User = this;
		}
		
		private void detach_comments(comment entity)
		{
			this.SendPropertyChanging();
			entity.User = null;
		}
		
		private void attach_hio_events(hio_event entity)
		{
			this.SendPropertyChanging();
			entity.User = this;
		}
		
		private void detach_hio_events(hio_event entity)
		{
			this.SendPropertyChanging();
			entity.User = null;
		}
		
		private void attach_user_locations(user_location entity)
		{
			this.SendPropertyChanging();
			entity.User = this;
		}
		
		private void detach_user_locations(user_location entity)
		{
			this.SendPropertyChanging();
			entity.User = null;
		}
		
		private void attach_IPaddresses(IPaddress entity)
		{
			this.SendPropertyChanging();
			entity.User = this;
		}
		
		private void detach_IPaddresses(IPaddress entity)
		{
			this.SendPropertyChanging();
			entity.User = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.comments")]
	public partial class comment : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _CID;
		
		private int _PlaceID;
		
		private string _Comment1;
		
		private int _UserID;
		
		private System.DateTime _Datetime;
		
		private EntityRef<User> _User;
		
		private EntityRef<place> _place;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnCIDChanging(int value);
    partial void OnCIDChanged();
    partial void OnPlaceIDChanging(int value);
    partial void OnPlaceIDChanged();
    partial void OnComment1Changing(string value);
    partial void OnComment1Changed();
    partial void OnUserIDChanging(int value);
    partial void OnUserIDChanged();
    partial void OnDatetimeChanging(System.DateTime value);
    partial void OnDatetimeChanged();
    #endregion
		
		public comment()
		{
			this._User = default(EntityRef<User>);
			this._place = default(EntityRef<place>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int CID
		{
			get
			{
				return this._CID;
			}
			set
			{
				if ((this._CID != value))
				{
					this.OnCIDChanging(value);
					this.SendPropertyChanging();
					this._CID = value;
					this.SendPropertyChanged("CID");
					this.OnCIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PlaceID", DbType="Int NOT NULL")]
		public int PlaceID
		{
			get
			{
				return this._PlaceID;
			}
			set
			{
				if ((this._PlaceID != value))
				{
					if (this._place.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnPlaceIDChanging(value);
					this.SendPropertyChanging();
					this._PlaceID = value;
					this.SendPropertyChanged("PlaceID");
					this.OnPlaceIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="Comment", Storage="_Comment1", DbType="VarChar(MAX) NOT NULL", CanBeNull=false)]
		public string Comment1
		{
			get
			{
				return this._Comment1;
			}
			set
			{
				if ((this._Comment1 != value))
				{
					this.OnComment1Changing(value);
					this.SendPropertyChanging();
					this._Comment1 = value;
					this.SendPropertyChanged("Comment1");
					this.OnComment1Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserID", DbType="Int NOT NULL")]
		public int UserID
		{
			get
			{
				return this._UserID;
			}
			set
			{
				if ((this._UserID != value))
				{
					if (this._User.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnUserIDChanging(value);
					this.SendPropertyChanging();
					this._UserID = value;
					this.SendPropertyChanged("UserID");
					this.OnUserIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Datetime", DbType="DateTime NOT NULL")]
		public System.DateTime Datetime
		{
			get
			{
				return this._Datetime;
			}
			set
			{
				if ((this._Datetime != value))
				{
					this.OnDatetimeChanging(value);
					this.SendPropertyChanging();
					this._Datetime = value;
					this.SendPropertyChanged("Datetime");
					this.OnDatetimeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_comment", Storage="_User", ThisKey="UserID", OtherKey="UserID", IsForeignKey=true)]
		public User User
		{
			get
			{
				return this._User.Entity;
			}
			set
			{
				User previousValue = this._User.Entity;
				if (((previousValue != value) 
							|| (this._User.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._User.Entity = null;
						previousValue.comments.Remove(this);
					}
					this._User.Entity = value;
					if ((value != null))
					{
						value.comments.Add(this);
						this._UserID = value.UserID;
					}
					else
					{
						this._UserID = default(int);
					}
					this.SendPropertyChanged("User");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="place_comment", Storage="_place", ThisKey="PlaceID", OtherKey="PID", IsForeignKey=true)]
		public place place
		{
			get
			{
				return this._place.Entity;
			}
			set
			{
				place previousValue = this._place.Entity;
				if (((previousValue != value) 
							|| (this._place.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._place.Entity = null;
						previousValue.comments.Remove(this);
					}
					this._place.Entity = value;
					if ((value != null))
					{
						value.comments.Add(this);
						this._PlaceID = value.PID;
					}
					else
					{
						this._PlaceID = default(int);
					}
					this.SendPropertyChanged("place");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.hio_events")]
	public partial class hio_event : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _EID;
		
		private int _UserID;
		
		private string _Event;
		
		private System.DateTime _Datetime;
		
		private string _Type;
		
		private EntityRef<User> _User;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnEIDChanging(int value);
    partial void OnEIDChanged();
    partial void OnUserIDChanging(int value);
    partial void OnUserIDChanged();
    partial void OnEventChanging(string value);
    partial void OnEventChanged();
    partial void OnDatetimeChanging(System.DateTime value);
    partial void OnDatetimeChanged();
    partial void OnTypeChanging(string value);
    partial void OnTypeChanged();
    #endregion
		
		public hio_event()
		{
			this._User = default(EntityRef<User>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int EID
		{
			get
			{
				return this._EID;
			}
			set
			{
				if ((this._EID != value))
				{
					this.OnEIDChanging(value);
					this.SendPropertyChanging();
					this._EID = value;
					this.SendPropertyChanged("EID");
					this.OnEIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserID", DbType="Int NOT NULL")]
		public int UserID
		{
			get
			{
				return this._UserID;
			}
			set
			{
				if ((this._UserID != value))
				{
					if (this._User.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnUserIDChanging(value);
					this.SendPropertyChanging();
					this._UserID = value;
					this.SendPropertyChanged("UserID");
					this.OnUserIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Event", DbType="VarChar(MAX)")]
		public string Event
		{
			get
			{
				return this._Event;
			}
			set
			{
				if ((this._Event != value))
				{
					this.OnEventChanging(value);
					this.SendPropertyChanging();
					this._Event = value;
					this.SendPropertyChanged("Event");
					this.OnEventChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Datetime", DbType="DateTime NOT NULL")]
		public System.DateTime Datetime
		{
			get
			{
				return this._Datetime;
			}
			set
			{
				if ((this._Datetime != value))
				{
					this.OnDatetimeChanging(value);
					this.SendPropertyChanging();
					this._Datetime = value;
					this.SendPropertyChanged("Datetime");
					this.OnDatetimeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Type", CanBeNull=false)]
		public string Type
		{
			get
			{
				return this._Type;
			}
			set
			{
				if ((this._Type != value))
				{
					this.OnTypeChanging(value);
					this.SendPropertyChanging();
					this._Type = value;
					this.SendPropertyChanged("Type");
					this.OnTypeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_hio_event", Storage="_User", ThisKey="UserID", OtherKey="UserID", IsForeignKey=true)]
		public User User
		{
			get
			{
				return this._User.Entity;
			}
			set
			{
				User previousValue = this._User.Entity;
				if (((previousValue != value) 
							|| (this._User.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._User.Entity = null;
						previousValue.hio_events.Remove(this);
					}
					this._User.Entity = value;
					if ((value != null))
					{
						value.hio_events.Add(this);
						this._UserID = value.UserID;
					}
					else
					{
						this._UserID = default(int);
					}
					this.SendPropertyChanged("User");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.user_locations")]
	public partial class user_location : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _LID;
		
		private int _UserID;
		
		private string _Username;
		
		private System.Nullable<decimal> _LatVal;
		
		private System.Nullable<decimal> _LongVal;
		
		private System.Nullable<int> _Inuse;
		
		private EntityRef<User> _User;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnLIDChanging(int value);
    partial void OnLIDChanged();
    partial void OnUserIDChanging(int value);
    partial void OnUserIDChanged();
    partial void OnUsernameChanging(string value);
    partial void OnUsernameChanged();
    partial void OnLatValChanging(System.Nullable<decimal> value);
    partial void OnLatValChanged();
    partial void OnLongValChanging(System.Nullable<decimal> value);
    partial void OnLongValChanged();
    partial void OnInuseChanging(System.Nullable<int> value);
    partial void OnInuseChanged();
    #endregion
		
		public user_location()
		{
			this._User = default(EntityRef<User>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int LID
		{
			get
			{
				return this._LID;
			}
			set
			{
				if ((this._LID != value))
				{
					this.OnLIDChanging(value);
					this.SendPropertyChanging();
					this._LID = value;
					this.SendPropertyChanged("LID");
					this.OnLIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserID", DbType="Int NOT NULL")]
		public int UserID
		{
			get
			{
				return this._UserID;
			}
			set
			{
				if ((this._UserID != value))
				{
					if (this._User.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnUserIDChanging(value);
					this.SendPropertyChanging();
					this._UserID = value;
					this.SendPropertyChanged("UserID");
					this.OnUserIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Username", DbType="VarChar(MAX)")]
		public string Username
		{
			get
			{
				return this._Username;
			}
			set
			{
				if ((this._Username != value))
				{
					this.OnUsernameChanging(value);
					this.SendPropertyChanging();
					this._Username = value;
					this.SendPropertyChanged("Username");
					this.OnUsernameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LatVal", DbType="Decimal(18,8)")]
		public System.Nullable<decimal> LatVal
		{
			get
			{
				return this._LatVal;
			}
			set
			{
				if ((this._LatVal != value))
				{
					this.OnLatValChanging(value);
					this.SendPropertyChanging();
					this._LatVal = value;
					this.SendPropertyChanged("LatVal");
					this.OnLatValChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LongVal", DbType="Decimal(18,8)")]
		public System.Nullable<decimal> LongVal
		{
			get
			{
				return this._LongVal;
			}
			set
			{
				if ((this._LongVal != value))
				{
					this.OnLongValChanging(value);
					this.SendPropertyChanging();
					this._LongVal = value;
					this.SendPropertyChanged("LongVal");
					this.OnLongValChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Inuse", DbType="Int")]
		public System.Nullable<int> Inuse
		{
			get
			{
				return this._Inuse;
			}
			set
			{
				if ((this._Inuse != value))
				{
					this.OnInuseChanging(value);
					this.SendPropertyChanging();
					this._Inuse = value;
					this.SendPropertyChanged("Inuse");
					this.OnInuseChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_user_location", Storage="_User", ThisKey="UserID", OtherKey="UserID", IsForeignKey=true)]
		public User User
		{
			get
			{
				return this._User.Entity;
			}
			set
			{
				User previousValue = this._User.Entity;
				if (((previousValue != value) 
							|| (this._User.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._User.Entity = null;
						previousValue.user_locations.Remove(this);
					}
					this._User.Entity = value;
					if ((value != null))
					{
						value.user_locations.Add(this);
						this._UserID = value.UserID;
					}
					else
					{
						this._UserID = default(int);
					}
					this.SendPropertyChanged("User");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Settings")]
	public partial class Setting : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _id;
		
		private int _APIcalls;
		
		private int _showTwitter;
		
		private System.Nullable<int> _set1;
		
		private System.Nullable<int> _set2;
		
		private System.Nullable<int> _set3;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidChanging(int value);
    partial void OnidChanged();
    partial void OnAPIcallsChanging(int value);
    partial void OnAPIcallsChanged();
    partial void OnshowTwitterChanging(int value);
    partial void OnshowTwitterChanged();
    partial void Onset1Changing(System.Nullable<int> value);
    partial void Onset1Changed();
    partial void Onset2Changing(System.Nullable<int> value);
    partial void Onset2Changed();
    partial void Onset3Changing(System.Nullable<int> value);
    partial void Onset3Changed();
    #endregion
		
		public Setting()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int id
		{
			get
			{
				return this._id;
			}
			set
			{
				if ((this._id != value))
				{
					this.OnidChanging(value);
					this.SendPropertyChanging();
					this._id = value;
					this.SendPropertyChanged("id");
					this.OnidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_APIcalls", DbType="Int NOT NULL")]
		public int APIcalls
		{
			get
			{
				return this._APIcalls;
			}
			set
			{
				if ((this._APIcalls != value))
				{
					this.OnAPIcallsChanging(value);
					this.SendPropertyChanging();
					this._APIcalls = value;
					this.SendPropertyChanged("APIcalls");
					this.OnAPIcallsChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_showTwitter", DbType="Int NOT NULL")]
		public int showTwitter
		{
			get
			{
				return this._showTwitter;
			}
			set
			{
				if ((this._showTwitter != value))
				{
					this.OnshowTwitterChanging(value);
					this.SendPropertyChanging();
					this._showTwitter = value;
					this.SendPropertyChanged("showTwitter");
					this.OnshowTwitterChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_set1", DbType="Int")]
		public System.Nullable<int> set1
		{
			get
			{
				return this._set1;
			}
			set
			{
				if ((this._set1 != value))
				{
					this.Onset1Changing(value);
					this.SendPropertyChanging();
					this._set1 = value;
					this.SendPropertyChanged("set1");
					this.Onset1Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_set2", DbType="Int")]
		public System.Nullable<int> set2
		{
			get
			{
				return this._set2;
			}
			set
			{
				if ((this._set2 != value))
				{
					this.Onset2Changing(value);
					this.SendPropertyChanging();
					this._set2 = value;
					this.SendPropertyChanged("set2");
					this.Onset2Changed();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_set3", DbType="Int")]
		public System.Nullable<int> set3
		{
			get
			{
				return this._set3;
			}
			set
			{
				if ((this._set3 != value))
				{
					this.Onset3Changing(value);
					this.SendPropertyChanging();
					this._set3 = value;
					this.SendPropertyChanged("set3");
					this.Onset3Changed();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.places")]
	public partial class place : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _PID;
		
		private decimal _LatVal;
		
		private decimal _LongVal;
		
		private string _Name;
		
		private int _Flag;
		
		private int _UserID;
		
		private string _Town;
		
		private string _Username;
		
		private EntitySet<comment> _comments;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnPIDChanging(int value);
    partial void OnPIDChanged();
    partial void OnLatValChanging(decimal value);
    partial void OnLatValChanged();
    partial void OnLongValChanging(decimal value);
    partial void OnLongValChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnFlagChanging(int value);
    partial void OnFlagChanged();
    partial void OnUserIDChanging(int value);
    partial void OnUserIDChanged();
    partial void OnTownChanging(string value);
    partial void OnTownChanged();
    partial void OnUsernameChanging(string value);
    partial void OnUsernameChanged();
    #endregion
		
		public place()
		{
			this._comments = new EntitySet<comment>(new Action<comment>(this.attach_comments), new Action<comment>(this.detach_comments));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int PID
		{
			get
			{
				return this._PID;
			}
			set
			{
				if ((this._PID != value))
				{
					this.OnPIDChanging(value);
					this.SendPropertyChanging();
					this._PID = value;
					this.SendPropertyChanged("PID");
					this.OnPIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LatVal", DbType="Decimal(18,8) NOT NULL")]
		public decimal LatVal
		{
			get
			{
				return this._LatVal;
			}
			set
			{
				if ((this._LatVal != value))
				{
					this.OnLatValChanging(value);
					this.SendPropertyChanging();
					this._LatVal = value;
					this.SendPropertyChanged("LatVal");
					this.OnLatValChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LongVal", DbType="Decimal(18,8) NOT NULL")]
		public decimal LongVal
		{
			get
			{
				return this._LongVal;
			}
			set
			{
				if ((this._LongVal != value))
				{
					this.OnLongValChanging(value);
					this.SendPropertyChanging();
					this._LongVal = value;
					this.SendPropertyChanged("LongVal");
					this.OnLongValChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="VarChar(MAX) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Flag", DbType="Int NOT NULL")]
		public int Flag
		{
			get
			{
				return this._Flag;
			}
			set
			{
				if ((this._Flag != value))
				{
					this.OnFlagChanging(value);
					this.SendPropertyChanging();
					this._Flag = value;
					this.SendPropertyChanged("Flag");
					this.OnFlagChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserID", DbType="Int NOT NULL")]
		public int UserID
		{
			get
			{
				return this._UserID;
			}
			set
			{
				if ((this._UserID != value))
				{
					this.OnUserIDChanging(value);
					this.SendPropertyChanging();
					this._UserID = value;
					this.SendPropertyChanged("UserID");
					this.OnUserIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Town", DbType="VarChar(MAX)")]
		public string Town
		{
			get
			{
				return this._Town;
			}
			set
			{
				if ((this._Town != value))
				{
					this.OnTownChanging(value);
					this.SendPropertyChanging();
					this._Town = value;
					this.SendPropertyChanged("Town");
					this.OnTownChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Username", DbType="VarChar(MAX)")]
		public string Username
		{
			get
			{
				return this._Username;
			}
			set
			{
				if ((this._Username != value))
				{
					this.OnUsernameChanging(value);
					this.SendPropertyChanging();
					this._Username = value;
					this.SendPropertyChanged("Username");
					this.OnUsernameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="place_comment", Storage="_comments", ThisKey="PID", OtherKey="PlaceID")]
		public EntitySet<comment> comments
		{
			get
			{
				return this._comments;
			}
			set
			{
				this._comments.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_comments(comment entity)
		{
			this.SendPropertyChanging();
			entity.place = this;
		}
		
		private void detach_comments(comment entity)
		{
			this.SendPropertyChanging();
			entity.place = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.notices")]
	public partial class notice : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _NID;
		
		private string _Ann_content;
		
		private System.DateTime _Datetime;
		
		private string _Name;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnNIDChanging(int value);
    partial void OnNIDChanged();
    partial void OnAnn_contentChanging(string value);
    partial void OnAnn_contentChanged();
    partial void OnDatetimeChanging(System.DateTime value);
    partial void OnDatetimeChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    #endregion
		
		public notice()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_NID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int NID
		{
			get
			{
				return this._NID;
			}
			set
			{
				if ((this._NID != value))
				{
					this.OnNIDChanging(value);
					this.SendPropertyChanging();
					this._NID = value;
					this.SendPropertyChanged("NID");
					this.OnNIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Ann_content", DbType="VarChar(MAX) NOT NULL", CanBeNull=false)]
		public string Ann_content
		{
			get
			{
				return this._Ann_content;
			}
			set
			{
				if ((this._Ann_content != value))
				{
					this.OnAnn_contentChanging(value);
					this.SendPropertyChanging();
					this._Ann_content = value;
					this.SendPropertyChanged("Ann_content");
					this.OnAnn_contentChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Datetime", DbType="DateTime NOT NULL")]
		public System.DateTime Datetime
		{
			get
			{
				return this._Datetime;
			}
			set
			{
				if ((this._Datetime != value))
				{
					this.OnDatetimeChanging(value);
					this.SendPropertyChanging();
					this._Datetime = value;
					this.SendPropertyChanged("Datetime");
					this.OnDatetimeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="VarChar(50)")]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.IPaddresses")]
	public partial class IPaddress : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _IPID;
		
		private string _IPaddr;
		
		private System.DateTime _Timestamp;
		
		private int _UserID;
		
		private EntityRef<User> _User;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIPIDChanging(int value);
    partial void OnIPIDChanged();
    partial void OnIPaddrChanging(string value);
    partial void OnIPaddrChanged();
    partial void OnTimestampChanging(System.DateTime value);
    partial void OnTimestampChanged();
    partial void OnUserIDChanging(int value);
    partial void OnUserIDChanged();
    #endregion
		
		public IPaddress()
		{
			this._User = default(EntityRef<User>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IPID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int IPID
		{
			get
			{
				return this._IPID;
			}
			set
			{
				if ((this._IPID != value))
				{
					this.OnIPIDChanging(value);
					this.SendPropertyChanging();
					this._IPID = value;
					this.SendPropertyChanged("IPID");
					this.OnIPIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IPaddr", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string IPaddr
		{
			get
			{
				return this._IPaddr;
			}
			set
			{
				if ((this._IPaddr != value))
				{
					this.OnIPaddrChanging(value);
					this.SendPropertyChanging();
					this._IPaddr = value;
					this.SendPropertyChanged("IPaddr");
					this.OnIPaddrChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Timestamp", DbType="DateTime NOT NULL")]
		public System.DateTime Timestamp
		{
			get
			{
				return this._Timestamp;
			}
			set
			{
				if ((this._Timestamp != value))
				{
					this.OnTimestampChanging(value);
					this.SendPropertyChanging();
					this._Timestamp = value;
					this.SendPropertyChanged("Timestamp");
					this.OnTimestampChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserID", DbType="Int NOT NULL")]
		public int UserID
		{
			get
			{
				return this._UserID;
			}
			set
			{
				if ((this._UserID != value))
				{
					if (this._User.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnUserIDChanging(value);
					this.SendPropertyChanging();
					this._UserID = value;
					this.SendPropertyChanged("UserID");
					this.OnUserIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="User_IPaddress", Storage="_User", ThisKey="UserID", OtherKey="UserID", IsForeignKey=true)]
		public User User
		{
			get
			{
				return this._User.Entity;
			}
			set
			{
				User previousValue = this._User.Entity;
				if (((previousValue != value) 
							|| (this._User.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._User.Entity = null;
						previousValue.IPaddresses.Remove(this);
					}
					this._User.Entity = value;
					if ((value != null))
					{
						value.IPaddresses.Add(this);
						this._UserID = value.UserID;
					}
					else
					{
						this._UserID = default(int);
					}
					this.SendPropertyChanged("User");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
}
#pragma warning restore 1591
